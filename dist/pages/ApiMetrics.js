"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ApiMetrics;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const lucide_react_1 = require("lucide-react");
const recharts_1 = require("recharts");
const MetricCard_1 = __importDefault(require("../components/ui/MetricCard"));
// Mock data for demonstration
const mockPerformanceData = [
    { time: '00:00', responseTime: 245, requests: 45, errors: 2 },
    { time: '04:00', responseTime: 198, requests: 32, errors: 1 },
    { time: '08:00', responseTime: 312, requests: 78, errors: 3 },
    { time: '12:00', responseTime: 278, requests: 95, errors: 5 },
    { time: '16:00', responseTime: 234, requests: 87, errors: 2 },
    { time: '20:00', responseTime: 189, requests: 65, errors: 1 },
];
const mockEndpointMetrics = [
    { endpoint: '/records', requests: 1247, avgTime: 245, errors: 12 },
    { endpoint: '/bases', requests: 89, avgTime: 156, errors: 1 },
    { endpoint: '/sync', requests: 234, avgTime: 1200, errors: 8 },
    { endpoint: '/batch', requests: 567, avgTime: 890, errors: 5 },
];
function ApiMetrics() {
    const [selectedPeriod, setSelectedPeriod] = (0, react_1.useState)('24h');
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-6 animate-fade-in", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center justify-between", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h1", { className: "text-3xl font-bold text-gray-900 dark:text-white", children: "API Metrics" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mt-1", children: "Monitor API performance and usage patterns" })] }), (0, jsx_runtime_1.jsx)("div", { className: "flex items-center space-x-2", children: (0, jsx_runtime_1.jsxs)("select", { value: selectedPeriod, onChange: (e) => setSelectedPeriod(e.target.value), className: "px-3 py-2 bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary-500", children: [(0, jsx_runtime_1.jsx)("option", { value: "1h", children: "Last Hour" }), (0, jsx_runtime_1.jsx)("option", { value: "24h", children: "Last 24 Hours" }), (0, jsx_runtime_1.jsx)("option", { value: "7d", children: "Last 7 Days" }), (0, jsx_runtime_1.jsx)("option", { value: "30d", children: "Last 30 Days" })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", children: [(0, jsx_runtime_1.jsx)(MetricCard_1.default, { title: "Avg Response Time", value: "245ms", icon: lucide_react_1.Clock, status: "healthy", change: { value: 8, type: 'decrease', period: 'last hour' } }), (0, jsx_runtime_1.jsx)(MetricCard_1.default, { title: "Requests/Min", value: 1247, icon: lucide_react_1.TrendingUp, status: "healthy", change: { value: 15, type: 'increase', period: 'last hour' } }), (0, jsx_runtime_1.jsx)(MetricCard_1.default, { title: "Error Rate", value: "0.3%", icon: lucide_react_1.AlertCircle, status: "healthy", change: { value: 0.1, type: 'decrease', period: 'last hour' } }), (0, jsx_runtime_1.jsx)(MetricCard_1.default, { title: "Cache Hit Rate", value: "87.2%", icon: lucide_react_1.BarChart3, status: "healthy", change: { value: 2.1, type: 'increase', period: 'last hour' } })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "card", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-white mb-4", children: "Response Time Trend" }), (0, jsx_runtime_1.jsx)(recharts_1.ResponsiveContainer, { width: "100%", height: 300, children: (0, jsx_runtime_1.jsxs)(recharts_1.LineChart, { data: mockPerformanceData, children: [(0, jsx_runtime_1.jsx)(recharts_1.CartesianGrid, { strokeDasharray: "3 3", className: "opacity-30" }), (0, jsx_runtime_1.jsx)(recharts_1.XAxis, { dataKey: "time", className: "text-xs" }), (0, jsx_runtime_1.jsx)(recharts_1.YAxis, { className: "text-xs", label: { value: 'ms', angle: -90, position: 'insideLeft' } }), (0, jsx_runtime_1.jsx)(recharts_1.Tooltip, { contentStyle: {
                                                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                                                border: '1px solid #e2e8f0',
                                                borderRadius: '8px'
                                            } }), (0, jsx_runtime_1.jsx)(recharts_1.Line, { type: "monotone", dataKey: "responseTime", stroke: "#3b82f6", strokeWidth: 2, dot: { fill: '#3b82f6', strokeWidth: 2, r: 4 } })] }) })] }), (0, jsx_runtime_1.jsxs)("div", { className: "card", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-white mb-4", children: "Request Volume & Errors" }), (0, jsx_runtime_1.jsx)(recharts_1.ResponsiveContainer, { width: "100%", height: 300, children: (0, jsx_runtime_1.jsxs)(recharts_1.BarChart, { data: mockPerformanceData, children: [(0, jsx_runtime_1.jsx)(recharts_1.CartesianGrid, { strokeDasharray: "3 3", className: "opacity-30" }), (0, jsx_runtime_1.jsx)(recharts_1.XAxis, { dataKey: "time", className: "text-xs" }), (0, jsx_runtime_1.jsx)(recharts_1.YAxis, { className: "text-xs" }), (0, jsx_runtime_1.jsx)(recharts_1.Tooltip, { contentStyle: {
                                                backgroundColor: 'rgba(255, 255, 255, 0.95)',
                                                border: '1px solid #e2e8f0',
                                                borderRadius: '8px'
                                            } }), (0, jsx_runtime_1.jsx)(recharts_1.Bar, { dataKey: "requests", fill: "#10b981", name: "Requests" }), (0, jsx_runtime_1.jsx)(recharts_1.Bar, { dataKey: "errors", fill: "#ef4444", name: "Errors" })] }) })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "card", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-white mb-6", children: "Endpoint Performance" }), (0, jsx_runtime_1.jsx)("div", { className: "overflow-x-auto", children: (0, jsx_runtime_1.jsxs)("table", { className: "w-full", children: [(0, jsx_runtime_1.jsx)("thead", { children: (0, jsx_runtime_1.jsxs)("tr", { className: "border-b border-gray-200/50 dark:border-gray-700/50", children: [(0, jsx_runtime_1.jsx)("th", { className: "text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400", children: "Endpoint" }), (0, jsx_runtime_1.jsx)("th", { className: "text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400", children: "Requests" }), (0, jsx_runtime_1.jsx)("th", { className: "text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400", children: "Avg Response" }), (0, jsx_runtime_1.jsx)("th", { className: "text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400", children: "Errors" }), (0, jsx_runtime_1.jsx)("th", { className: "text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400", children: "Error Rate" }), (0, jsx_runtime_1.jsx)("th", { className: "text-left py-3 px-4 text-sm font-medium text-gray-600 dark:text-gray-400", children: "Performance" })] }) }), (0, jsx_runtime_1.jsx)("tbody", { children: mockEndpointMetrics.map((endpoint, index) => {
                                        const errorRate = (endpoint.errors / endpoint.requests) * 100;
                                        const performanceStatus = endpoint.avgTime < 300 ? 'healthy' : endpoint.avgTime < 1000 ? 'warning' : 'error';
                                        return ((0, jsx_runtime_1.jsxs)("tr", { className: "border-b border-gray-200/30 dark:border-gray-700/30 hover:bg-gray-50/50 dark:hover:bg-gray-800/50 transition-colors", children: [(0, jsx_runtime_1.jsx)("td", { className: "py-3 px-4", children: (0, jsx_runtime_1.jsx)("code", { className: "text-sm font-mono bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded", children: endpoint.endpoint }) }), (0, jsx_runtime_1.jsx)("td", { className: "py-3 px-4 text-sm text-gray-700 dark:text-gray-300", children: endpoint.requests.toLocaleString() }), (0, jsx_runtime_1.jsxs)("td", { className: "py-3 px-4 text-sm text-gray-700 dark:text-gray-300", children: [endpoint.avgTime, "ms"] }), (0, jsx_runtime_1.jsx)("td", { className: "py-3 px-4 text-sm text-gray-700 dark:text-gray-300", children: endpoint.errors }), (0, jsx_runtime_1.jsx)("td", { className: "py-3 px-4", children: (0, jsx_runtime_1.jsxs)("span", { className: `text-sm ${errorRate > 5 ? 'text-red-600 dark:text-red-400' : errorRate > 1 ? 'text-yellow-600 dark:text-yellow-400' : 'text-green-600 dark:text-green-400'}`, children: [errorRate.toFixed(1), "%"] }) }), (0, jsx_runtime_1.jsx)("td", { className: "py-3 px-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)("div", { className: `w-2 h-2 rounded-full ${performanceStatus === 'healthy' ? 'bg-green-500' :
                                                                    performanceStatus === 'warning' ? 'bg-yellow-500' : 'bg-red-500'}` }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-700 dark:text-gray-300 capitalize", children: performanceStatus })] }) })] }, index));
                                    }) })] }) })] })] }));
}
//# sourceMappingURL=ApiMetrics.js.map